/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.api.project2.controller.generated.appointmentscheduling;

import com.api.project2.model.generated.appointmentscheduling.AppointmentDetails;
import java.math.BigDecimal;
import com.api.project2.model.generated.appointmentscheduling.CreateAppointmentRequest;
import com.api.project2.model.generated.appointmentscheduling.CreateAppointmentResponse;
import com.api.project2.model.generated.appointmentscheduling.DeleteAppointmentResponse;
import com.api.project2.model.generated.appointmentscheduling.Errors;
import com.api.project2.model.generated.appointmentscheduling.UpdateAppointmentRequest;
import com.api.project2.model.generated.appointmentscheduling.UpdateAppointmentResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "Appointments", description = "the Appointments API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/appointments/createAppointment : Create Appointment
     * Create a new appointment
     *
     * @param createAppointmentRequest  (optional)
     * @return Appointment successfully created (status code 200)
     *         or Invalid request (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "createAppointment",
        summary = "Create Appointment",
        description = "Create a new appointment",
        tags = { "Appointments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Appointment successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateAppointmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/appointments/createAppointment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateAppointmentResponse> createAppointment(
        @Parameter(name = "CreateAppointmentRequest", description = "") @Valid @RequestBody(required = false) CreateAppointmentRequest createAppointmentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"appointmentId\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/appointments/deleteAppointment : Delete Appointment
     * Delete an existing appointment
     *
     * @param appointmentId  (required)
     * @return Appointment successfully deleted (status code 200)
     *         or Invalid request (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "deleteAppointment",
        summary = "Delete Appointment",
        description = "Delete an existing appointment",
        tags = { "Appointments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Appointment successfully deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteAppointmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/appointments/deleteAppointment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeleteAppointmentResponse> deleteAppointment(
        @NotNull @Parameter(name = "appointmentId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "appointmentId", required = true) BigDecimal appointmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"result\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/appointments/getAppointment : Get Appointment
     * Retrieve details of an appointment
     *
     * @param appointmentId  (required)
     * @return Appointment details retrieved successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "getAppointment",
        summary = "Get Appointment",
        description = "Retrieve details of an appointment",
        tags = { "Appointments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Appointment details retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppointmentDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/appointments/getAppointment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppointmentDetails> getAppointment(
        @NotNull @Parameter(name = "appointmentId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "appointmentId", required = true) BigDecimal appointmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"idDoctor\" : 1.4658129805029452, \"idPatient\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"type\" : \"CONSULTATION\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/appointments/updateAppointment : Update Appointment
     * Update an existing appointment
     *
     * @param appointmentId  (required)
     * @param updateAppointmentRequest  (optional)
     * @return Appointment successfully updated (status code 200)
     *         or Invalid request (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "updateAppointment",
        summary = "Update Appointment",
        description = "Update an existing appointment",
        tags = { "Appointments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Appointment successfully updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateAppointmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/appointments/updateAppointment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateAppointmentResponse> updateAppointment(
        @NotNull @Parameter(name = "appointmentId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "appointmentId", required = true) BigDecimal appointmentId,
        @Parameter(name = "UpdateAppointmentRequest", description = "") @Valid @RequestBody(required = false) UpdateAppointmentRequest updateAppointmentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"result\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestId\" : \"requestId\", \"errors\" : [ { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" }, { \"code\" : \"Internal_Server_Error\", \"error\" : \"error\", \"message\" : \"error message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
